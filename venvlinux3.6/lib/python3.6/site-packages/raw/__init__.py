import os, time, requests, traceback, json, pathlib

token_path = '/tmp/ruqqus_token'

class Ruqqus:
    def __init__(self, client_id, client_secret, user_agent, access_token, refresh_token,x_user_type='Bot'):
        self.client_id = client_id
        self.client_secret = client_secret
        self.user_agent = user_agent
        self.refresh_token = refresh_token
        self.access_token = access_token
        self.x_user_type = x_user_type
        if pathlib.Path("/tmp/ruqqus_token").exists() == True:
            self.token_file=token_path
        else:
            with open(token_path,'w') as f:
                self.token_file=token_path

    def request(self, method, endpoint, data):
        auth_header = "Bearer {}".format(open(self.token_file,'r+').read())
        headers = {"Authorization": auth_header, "User-Agent": self.user_agent,"X-User-Type": str(self.x_user_type)}
        url = 'https://ruqqus.com{}'.format(endpoint)
        response = requests.request(method,url,headers=headers,data=data)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 204:
            return response.status_code
        elif response.status_code == 401:
            self.refresh()
            response = self.request(method,endpoint,data=data)
            return response.json()
        else:
            raise Exception(response.json()['error'])

    def get(self, endpoint, data=None):
        return self.request('GET', endpoint, data=data)
    
    def post(self, endpoint, data=None):
        return self.request('POST', endpoint, data=data)

    def refresh(self):
        r = requests.post('https://ruqqus.com/oauth/grant',
                          headers = {"User-Agent": self.user_agent},
                          data = {"client_id": self.client_id,
                                  "client_secret": self.client_secret,
                                  "grant_type": "refresh",
                                  "refresh_token": self.refresh_token})
        new_token = r.json()["access_token"]
        with open(self.token_file, 'w') as tf:
            tf.write(new_token)
        return self
    
    def name_available(self, username):
        check = self.get('/api/v1/is_available/{}'.format(username))#.json()
        return check[username]
    
    def board_available(self, guild):
        check = self.get('/api/v1/board_available/{}'.format(guild))#.json()
        return check['available']

    def ruqqie(self,user):
        userdata = self.get('/api/v1/user/{}'.format(user))
        self.banner_url = userdata['banner_url']
        self.bio = userdata['bio']
        self.bio_html = userdata['bio_html']
        self.comment_count = userdata['comment_count']
        self.comment_rep = userdata['comment_rep']
        self.created_utc = userdata['created_utc']
        self.id = userdata['id']
        self.is_banned = userdata['is_banned']
        self.is_premium = userdata['is_premium']
        self.is_private = userdata['is_private']
        self.permalink = userdata['permalink']
        self.post_count = userdata['post_count']
        self.post_rep = userdata['post_rep']
        self.profile_url = userdata['profile_url']
        self.title = userdata['title']
        self.title_color = self.title['color'] if self.title is not None else None
        self.title_id = self.title['id'] if self.title is not None else None
        self.title_kind = self.title['kind'] if self.title is not None else None
        self.title_text = self.title['text'] if self.title is not None else None
        self.username = userdata['username']
        return self
    
    def guild(self,board):
        boarddata = self.get('/api/v1/guild/{}'.format(board))
        self.banner_url = boarddata['banner_url']
        self.color = boarddata['color']
        self.created_utc = boarddata['created_utc']
        self.description = boarddata['description']
        self.description_html = boarddata['description_html']
        self.fullname = boarddata['fullname']
        self.guildmasters = [guildmaster['username'] for guildmaster in boarddata['guildmasters']]
        self.id = boarddata['id']
        self.is_banned = boarddata['is_banned']
        self.is_private = boarddata['is_private']
        self.is_restricted = boarddata['is_restricted']
        self.is_siege_protected = boarddata['is_siege_protected']
        self.name = boarddata['name']
        self.over_18 = boarddata['over_18']
        self.permalink = boarddata['permalink']
        self.profile_url = boarddata['profile_url']
        self.subscriber_count = boarddata['subscriber_count']
        return self
    
    def comment(self,cid):
        com = self.get('/api/v1/comment/{}'.format(cid))
        self.author_name = com['author_name']
        self.award_count = com['award_count']
        self.body = com['body']
        self.body_html = com['body_html']
        self.created_utc = com['created_utc']
        self.downvotes = com['downvotes']
        self.edited_utc = com['edited_utc']
        self.fullname = com['fullname']
        self.guild = com['guild']['name']
        self.id = com['id']
        self.is_archived = com['is_archived']
        self.is_banned = com['is_banned']
        self.is_bot = com['is_bot']
        self.is_deleted = com['is_deleted']
        self.is_nsfl = com['is_nsfl']
        self.is_nsfw = com['is_nsfw']
        self.is_offensive = com['is_offensive']
        self.level = com['level']
        self.permalink = com['permalink']
        self.post = com['post']['id']
        self.post_id = com['post_id']
        self.replies = com['replies']
        self.score = com['score']
        self.upvotes = com['upvotes']
        return self

    def submission(self,sid):
        sub = self.get('/api/v1/post/{}'.format(sid))
        self.author_name = sub['author']
        self.award_count = sub['award_count']
        self.body = sub['body']
        self.body_html = sub['body_html']
        self.comment_count = sub['comment_count']
        self.created_utc = sub['created_utc']
        self.domain = sub['domain']
        self.downvotes = sub['downvotes']
        self.edited_utc = sub['edited_utc']
        self.fullname = sub['fullname']
        self.guild_id = sub['guild_id']
        self.guild_name = sub['guild_name']
        self.id = sub['id']
        self.is_archived = sub['is_archived']
        self.is_banned = sub['is_banned']
        self.is_bot = sub['is_bot']
        self.is_deleted = sub['is_deleted']
        self.is_nsfl = sub['is_nsfl']
        self.is_nsfw = sub['is_nsfw']
        self.is_offensive = sub['is_offensive']
        self.meta_description = sub['meta_description']
        self.meta_title = sub['meta_title']
        self.original_guild_id = sub['original_guild_id']
        self.original_guild_name = sub['original_guild_name']
        self.permalink = sub['permalink']
        self.replies = sub['replies'] if sub.get('replies') is not None else None
        self.score = sub['score']
        self.thumb_url = sub['thumb_url']
        self.title = sub['title']
        self.upvotes = sub['upvotes']
        self.url = sub['url']
        self.voted = sub['voted']
        return self
